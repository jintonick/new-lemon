{"ast":null,"code":"// src/use-checkbox-group.ts\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { isObject } from \"@chakra-ui/shared-utils\";\nimport { useCallback } from \"react\";\nfunction isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n}\nfunction useCheckboxGroup() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    defaultValue,\n    value: valueProp,\n    onChange,\n    isDisabled,\n    isNative\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp\n  });\n  const handleChange = useCallback(eventOrValue => {\n    if (!value) return;\n    const isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\n    const selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    const nextValue = isChecked ? [...value, selectedValue] : value.filter(v => String(v) !== String(selectedValue));\n    setValue(nextValue);\n  }, [setValue, value]);\n  const getCheckboxProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return {\n      ...props2,\n      [checkedKey]: value.some(val => String(props2.value) === String(val)),\n      onChange: handleChange\n    };\n  }, [handleChange, isNative, value]);\n  return {\n    value,\n    isDisabled,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps\n  };\n}\nexport { useCheckboxGroup };","map":{"version":3,"names":["useCallbackRef","useControllableState","isObject","useCallback","isInputEvent","value","target","useCheckboxGroup","props","defaultValue","valueProp","onChange","isDisabled","isNative","onChangeProp","setValue","handleChange","eventOrValue","isChecked","checked","includes","selectedValue","nextValue","filter","v","String","getCheckboxProps","props2","checkedKey","some","val"],"sources":["Y:/courseira/NewLemon/new-lemon/node_modules/@chakra-ui/checkbox/dist/chunk-5F7ST2TT.mjs"],"sourcesContent":["// src/use-checkbox-group.ts\r\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\r\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\r\nimport { isObject } from \"@chakra-ui/shared-utils\";\r\nimport { useCallback } from \"react\";\r\nfunction isInputEvent(value) {\r\n  return value && isObject(value) && isObject(value.target);\r\n}\r\nfunction useCheckboxGroup(props = {}) {\r\n  const {\r\n    defaultValue,\r\n    value: valueProp,\r\n    onChange,\r\n    isDisabled,\r\n    isNative\r\n  } = props;\r\n  const onChangeProp = useCallbackRef(onChange);\r\n  const [value, setValue] = useControllableState({\r\n    value: valueProp,\r\n    defaultValue: defaultValue || [],\r\n    onChange: onChangeProp\r\n  });\r\n  const handleChange = useCallback(\r\n    (eventOrValue) => {\r\n      if (!value)\r\n        return;\r\n      const isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\r\n      const selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\r\n      const nextValue = isChecked ? [...value, selectedValue] : value.filter((v) => String(v) !== String(selectedValue));\r\n      setValue(nextValue);\r\n    },\r\n    [setValue, value]\r\n  );\r\n  const getCheckboxProps = useCallback(\r\n    (props2 = {}) => {\r\n      const checkedKey = isNative ? \"checked\" : \"isChecked\";\r\n      return {\r\n        ...props2,\r\n        [checkedKey]: value.some((val) => String(props2.value) === String(val)),\r\n        onChange: handleChange\r\n      };\r\n    },\r\n    [handleChange, isNative, value]\r\n  );\r\n  return {\r\n    value,\r\n    isDisabled,\r\n    onChange: handleChange,\r\n    setValue,\r\n    getCheckboxProps\r\n  };\r\n}\r\n\r\nexport {\r\n  useCheckboxGroup\r\n};\r\n"],"mappings":"AAAA;AACA,SAASA,cAAc,QAAQ,mCAAmC;AAClE,SAASC,oBAAoB,QAAQ,yCAAyC;AAC9E,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,WAAW,QAAQ,OAAO;AACnC,SAASC,YAAY,CAACC,KAAK,EAAE;EAC3B,OAAOA,KAAK,IAAIH,QAAQ,CAACG,KAAK,CAAC,IAAIH,QAAQ,CAACG,KAAK,CAACC,MAAM,CAAC;AAC3D;AACA,SAASC,gBAAgB,GAAa;EAAA,IAAZC,KAAK,uEAAG,CAAC,CAAC;EAClC,MAAM;IACJC,YAAY;IACZJ,KAAK,EAAEK,SAAS;IAChBC,QAAQ;IACRC,UAAU;IACVC;EACF,CAAC,GAAGL,KAAK;EACT,MAAMM,YAAY,GAAGd,cAAc,CAACW,QAAQ,CAAC;EAC7C,MAAM,CAACN,KAAK,EAAEU,QAAQ,CAAC,GAAGd,oBAAoB,CAAC;IAC7CI,KAAK,EAAEK,SAAS;IAChBD,YAAY,EAAEA,YAAY,IAAI,EAAE;IAChCE,QAAQ,EAAEG;EACZ,CAAC,CAAC;EACF,MAAME,YAAY,GAAGb,WAAW,CAC7Bc,YAAY,IAAK;IAChB,IAAI,CAACZ,KAAK,EACR;IACF,MAAMa,SAAS,GAAGd,YAAY,CAACa,YAAY,CAAC,GAAGA,YAAY,CAACX,MAAM,CAACa,OAAO,GAAG,CAACd,KAAK,CAACe,QAAQ,CAACH,YAAY,CAAC;IAC1G,MAAMI,aAAa,GAAGjB,YAAY,CAACa,YAAY,CAAC,GAAGA,YAAY,CAACX,MAAM,CAACD,KAAK,GAAGY,YAAY;IAC3F,MAAMK,SAAS,GAAGJ,SAAS,GAAG,CAAC,GAAGb,KAAK,EAAEgB,aAAa,CAAC,GAAGhB,KAAK,CAACkB,MAAM,CAAEC,CAAC,IAAKC,MAAM,CAACD,CAAC,CAAC,KAAKC,MAAM,CAACJ,aAAa,CAAC,CAAC;IAClHN,QAAQ,CAACO,SAAS,CAAC;EACrB,CAAC,EACD,CAACP,QAAQ,EAAEV,KAAK,CAAC,CAClB;EACD,MAAMqB,gBAAgB,GAAGvB,WAAW,CAClC,YAAiB;IAAA,IAAhBwB,MAAM,uEAAG,CAAC,CAAC;IACV,MAAMC,UAAU,GAAGf,QAAQ,GAAG,SAAS,GAAG,WAAW;IACrD,OAAO;MACL,GAAGc,MAAM;MACT,CAACC,UAAU,GAAGvB,KAAK,CAACwB,IAAI,CAAEC,GAAG,IAAKL,MAAM,CAACE,MAAM,CAACtB,KAAK,CAAC,KAAKoB,MAAM,CAACK,GAAG,CAAC,CAAC;MACvEnB,QAAQ,EAAEK;IACZ,CAAC;EACH,CAAC,EACD,CAACA,YAAY,EAAEH,QAAQ,EAAER,KAAK,CAAC,CAChC;EACD,OAAO;IACLA,KAAK;IACLO,UAAU;IACVD,QAAQ,EAAEK,YAAY;IACtBD,QAAQ;IACRW;EACF,CAAC;AACH;AAEA,SACEnB,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}