{"ast":null,"code":"import { useUpdateEffect } from \"./chunk-5AOLTBA4.mjs\";\nimport { useEventListener } from \"./chunk-34PRFZWK.mjs\";\nimport { useSafeLayoutEffect } from \"./chunk-IYF65QR3.mjs\";\n\n// src/use-focus-on-show.ts\nimport { contains, focus, getAllFocusable, isRefObject } from \"@chakra-ui/utils\";\nimport { useCallback, useRef } from \"react\";\nvar defaultOptions = {\n  preventScroll: true,\n  shouldFocus: false\n};\nfunction useFocusOnShow(target) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;\n  const {\n    focusRef,\n    preventScroll,\n    shouldFocus,\n    visible\n  } = options;\n  const element = isRefObject(target) ? target.current : target;\n  const autoFocusValue = shouldFocus && visible;\n  const autoFocusRef = useRef(autoFocusValue);\n  const lastVisibleRef = useRef(visible);\n  useSafeLayoutEffect(() => {\n    if (!lastVisibleRef.current && visible) {\n      autoFocusRef.current = autoFocusValue;\n    }\n    lastVisibleRef.current = visible;\n  }, [visible, autoFocusValue]);\n  const onFocus = useCallback(() => {\n    if (!visible || !element || !autoFocusRef.current) return;\n    autoFocusRef.current = false;\n    if (contains(element, document.activeElement)) return;\n    if (focusRef == null ? void 0 : focusRef.current) {\n      focus(focusRef.current, {\n        preventScroll,\n        nextTick: true\n      });\n    } else {\n      const tabbableEls = getAllFocusable(element);\n      if (tabbableEls.length > 0) {\n        focus(tabbableEls[0], {\n          preventScroll,\n          nextTick: true\n        });\n      }\n    }\n  }, [visible, preventScroll, element, focusRef]);\n  useUpdateEffect(() => {\n    onFocus();\n  }, [onFocus]);\n  useEventListener(\"transitionend\", onFocus, element);\n}\nexport { useFocusOnShow };","map":{"version":3,"names":["useUpdateEffect","useEventListener","useSafeLayoutEffect","contains","focus","getAllFocusable","isRefObject","useCallback","useRef","defaultOptions","preventScroll","shouldFocus","useFocusOnShow","target","options","focusRef","visible","element","current","autoFocusValue","autoFocusRef","lastVisibleRef","onFocus","document","activeElement","nextTick","tabbableEls","length"],"sources":["Y:/courseira/NewLemon/new-lemon/node_modules/@chakra-ui/hooks/dist/chunk-S5MINBBA.mjs"],"sourcesContent":["import {\r\n  useUpdateEffect\r\n} from \"./chunk-5AOLTBA4.mjs\";\r\nimport {\r\n  useEventListener\r\n} from \"./chunk-34PRFZWK.mjs\";\r\nimport {\r\n  useSafeLayoutEffect\r\n} from \"./chunk-IYF65QR3.mjs\";\r\n\r\n// src/use-focus-on-show.ts\r\nimport {\r\n  contains,\r\n  focus,\r\n  getAllFocusable,\r\n  isRefObject\r\n} from \"@chakra-ui/utils\";\r\nimport { useCallback, useRef } from \"react\";\r\nvar defaultOptions = {\r\n  preventScroll: true,\r\n  shouldFocus: false\r\n};\r\nfunction useFocusOnShow(target, options = defaultOptions) {\r\n  const { focusRef, preventScroll, shouldFocus, visible } = options;\r\n  const element = isRefObject(target) ? target.current : target;\r\n  const autoFocusValue = shouldFocus && visible;\r\n  const autoFocusRef = useRef(autoFocusValue);\r\n  const lastVisibleRef = useRef(visible);\r\n  useSafeLayoutEffect(() => {\r\n    if (!lastVisibleRef.current && visible) {\r\n      autoFocusRef.current = autoFocusValue;\r\n    }\r\n    lastVisibleRef.current = visible;\r\n  }, [visible, autoFocusValue]);\r\n  const onFocus = useCallback(() => {\r\n    if (!visible || !element || !autoFocusRef.current)\r\n      return;\r\n    autoFocusRef.current = false;\r\n    if (contains(element, document.activeElement))\r\n      return;\r\n    if (focusRef == null ? void 0 : focusRef.current) {\r\n      focus(focusRef.current, { preventScroll, nextTick: true });\r\n    } else {\r\n      const tabbableEls = getAllFocusable(element);\r\n      if (tabbableEls.length > 0) {\r\n        focus(tabbableEls[0], { preventScroll, nextTick: true });\r\n      }\r\n    }\r\n  }, [visible, preventScroll, element, focusRef]);\r\n  useUpdateEffect(() => {\r\n    onFocus();\r\n  }, [onFocus]);\r\n  useEventListener(\"transitionend\", onFocus, element);\r\n}\r\n\r\nexport {\r\n  useFocusOnShow\r\n};\r\n"],"mappings":"AAAA,SACEA,eAAe,QACV,sBAAsB;AAC7B,SACEC,gBAAgB,QACX,sBAAsB;AAC7B,SACEC,mBAAmB,QACd,sBAAsB;;AAE7B;AACA,SACEC,QAAQ,EACRC,KAAK,EACLC,eAAe,EACfC,WAAW,QACN,kBAAkB;AACzB,SAASC,WAAW,EAAEC,MAAM,QAAQ,OAAO;AAC3C,IAAIC,cAAc,GAAG;EACnBC,aAAa,EAAE,IAAI;EACnBC,WAAW,EAAE;AACf,CAAC;AACD,SAASC,cAAc,CAACC,MAAM,EAA4B;EAAA,IAA1BC,OAAO,uEAAGL,cAAc;EACtD,MAAM;IAAEM,QAAQ;IAAEL,aAAa;IAAEC,WAAW;IAAEK;EAAQ,CAAC,GAAGF,OAAO;EACjE,MAAMG,OAAO,GAAGX,WAAW,CAACO,MAAM,CAAC,GAAGA,MAAM,CAACK,OAAO,GAAGL,MAAM;EAC7D,MAAMM,cAAc,GAAGR,WAAW,IAAIK,OAAO;EAC7C,MAAMI,YAAY,GAAGZ,MAAM,CAACW,cAAc,CAAC;EAC3C,MAAME,cAAc,GAAGb,MAAM,CAACQ,OAAO,CAAC;EACtCd,mBAAmB,CAAC,MAAM;IACxB,IAAI,CAACmB,cAAc,CAACH,OAAO,IAAIF,OAAO,EAAE;MACtCI,YAAY,CAACF,OAAO,GAAGC,cAAc;IACvC;IACAE,cAAc,CAACH,OAAO,GAAGF,OAAO;EAClC,CAAC,EAAE,CAACA,OAAO,EAAEG,cAAc,CAAC,CAAC;EAC7B,MAAMG,OAAO,GAAGf,WAAW,CAAC,MAAM;IAChC,IAAI,CAACS,OAAO,IAAI,CAACC,OAAO,IAAI,CAACG,YAAY,CAACF,OAAO,EAC/C;IACFE,YAAY,CAACF,OAAO,GAAG,KAAK;IAC5B,IAAIf,QAAQ,CAACc,OAAO,EAAEM,QAAQ,CAACC,aAAa,CAAC,EAC3C;IACF,IAAIT,QAAQ,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACG,OAAO,EAAE;MAChDd,KAAK,CAACW,QAAQ,CAACG,OAAO,EAAE;QAAER,aAAa;QAAEe,QAAQ,EAAE;MAAK,CAAC,CAAC;IAC5D,CAAC,MAAM;MACL,MAAMC,WAAW,GAAGrB,eAAe,CAACY,OAAO,CAAC;MAC5C,IAAIS,WAAW,CAACC,MAAM,GAAG,CAAC,EAAE;QAC1BvB,KAAK,CAACsB,WAAW,CAAC,CAAC,CAAC,EAAE;UAAEhB,aAAa;UAAEe,QAAQ,EAAE;QAAK,CAAC,CAAC;MAC1D;IACF;EACF,CAAC,EAAE,CAACT,OAAO,EAAEN,aAAa,EAAEO,OAAO,EAAEF,QAAQ,CAAC,CAAC;EAC/Cf,eAAe,CAAC,MAAM;IACpBsB,OAAO,EAAE;EACX,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EACbrB,gBAAgB,CAAC,eAAe,EAAEqB,OAAO,EAAEL,OAAO,CAAC;AACrD;AAEA,SACEL,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}