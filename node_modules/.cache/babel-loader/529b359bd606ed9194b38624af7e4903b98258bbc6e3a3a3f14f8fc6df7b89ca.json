{"ast":null,"code":"// src/textarea.tsx\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\n\n// ../../utilities/object-utils/src/index.ts\nfunction omit(object) {\n  let keysToOmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const clone = Object.assign({}, object);\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key];\n    }\n  }\n  return clone;\n}\n\n// src/textarea.tsx\nimport { jsx } from \"react/jsx-runtime\";\nvar omitted = [\"h\", \"minH\", \"height\", \"minHeight\"];\nvar Textarea = forwardRef((props, ref) => {\n  const styles = useStyleConfig(\"Textarea\", props);\n  const {\n    className,\n    rows,\n    ...rest\n  } = omitThemingProps(props);\n  const textareaProps = useFormControl(rest);\n  const textareaStyles = rows ? omit(styles, omitted) : styles;\n  return /* @__PURE__ */jsx(chakra.textarea, {\n    ref,\n    rows,\n    ...textareaProps,\n    className: cx(\"chakra-textarea\", className),\n    __css: textareaStyles\n  });\n});\nTextarea.displayName = \"Textarea\";\nexport { Textarea };","map":{"version":3,"names":["useFormControl","chakra","forwardRef","omitThemingProps","useStyleConfig","cx","omit","object","keysToOmit","clone","Object","assign","key","jsx","omitted","Textarea","props","ref","styles","className","rows","rest","textareaProps","textareaStyles","textarea","__css","displayName"],"sources":["Y:/courseira/NewLemon/new-lemon/node_modules/@chakra-ui/textarea/dist/chunk-OEQDSMWZ.mjs"],"sourcesContent":["// src/textarea.tsx\r\nimport { useFormControl } from \"@chakra-ui/form-control\";\r\nimport {\r\n  chakra,\r\n  forwardRef,\r\n  omitThemingProps,\r\n  useStyleConfig\r\n} from \"@chakra-ui/system\";\r\nimport { cx } from \"@chakra-ui/shared-utils\";\r\n\r\n// ../../utilities/object-utils/src/index.ts\r\nfunction omit(object, keysToOmit = []) {\r\n  const clone = Object.assign({}, object);\r\n  for (const key of keysToOmit) {\r\n    if (key in clone) {\r\n      delete clone[key];\r\n    }\r\n  }\r\n  return clone;\r\n}\r\n\r\n// src/textarea.tsx\r\nimport { jsx } from \"react/jsx-runtime\";\r\nvar omitted = [\"h\", \"minH\", \"height\", \"minHeight\"];\r\nvar Textarea = forwardRef((props, ref) => {\r\n  const styles = useStyleConfig(\"Textarea\", props);\r\n  const { className, rows, ...rest } = omitThemingProps(props);\r\n  const textareaProps = useFormControl(rest);\r\n  const textareaStyles = rows ? omit(styles, omitted) : styles;\r\n  return /* @__PURE__ */ jsx(\r\n    chakra.textarea,\r\n    {\r\n      ref,\r\n      rows,\r\n      ...textareaProps,\r\n      className: cx(\"chakra-textarea\", className),\r\n      __css: textareaStyles\r\n    }\r\n  );\r\n});\r\nTextarea.displayName = \"Textarea\";\r\n\r\nexport {\r\n  Textarea\r\n};\r\n"],"mappings":"AAAA;AACA,SAASA,cAAc,QAAQ,yBAAyB;AACxD,SACEC,MAAM,EACNC,UAAU,EACVC,gBAAgB,EAChBC,cAAc,QACT,mBAAmB;AAC1B,SAASC,EAAE,QAAQ,yBAAyB;;AAE5C;AACA,SAASC,IAAI,CAACC,MAAM,EAAmB;EAAA,IAAjBC,UAAU,uEAAG,EAAE;EACnC,MAAMC,KAAK,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEJ,MAAM,CAAC;EACvC,KAAK,MAAMK,GAAG,IAAIJ,UAAU,EAAE;IAC5B,IAAII,GAAG,IAAIH,KAAK,EAAE;MAChB,OAAOA,KAAK,CAACG,GAAG,CAAC;IACnB;EACF;EACA,OAAOH,KAAK;AACd;;AAEA;AACA,SAASI,GAAG,QAAQ,mBAAmB;AACvC,IAAIC,OAAO,GAAG,CAAC,GAAG,EAAE,MAAM,EAAE,QAAQ,EAAE,WAAW,CAAC;AAClD,IAAIC,QAAQ,GAAGb,UAAU,CAAC,CAACc,KAAK,EAAEC,GAAG,KAAK;EACxC,MAAMC,MAAM,GAAGd,cAAc,CAAC,UAAU,EAAEY,KAAK,CAAC;EAChD,MAAM;IAAEG,SAAS;IAAEC,IAAI;IAAE,GAAGC;EAAK,CAAC,GAAGlB,gBAAgB,CAACa,KAAK,CAAC;EAC5D,MAAMM,aAAa,GAAGtB,cAAc,CAACqB,IAAI,CAAC;EAC1C,MAAME,cAAc,GAAGH,IAAI,GAAGd,IAAI,CAACY,MAAM,EAAEJ,OAAO,CAAC,GAAGI,MAAM;EAC5D,OAAO,eAAgBL,GAAG,CACxBZ,MAAM,CAACuB,QAAQ,EACf;IACEP,GAAG;IACHG,IAAI;IACJ,GAAGE,aAAa;IAChBH,SAAS,EAAEd,EAAE,CAAC,iBAAiB,EAAEc,SAAS,CAAC;IAC3CM,KAAK,EAAEF;EACT,CAAC,CACF;AACH,CAAC,CAAC;AACFR,QAAQ,CAACW,WAAW,GAAG,UAAU;AAEjC,SACEX,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}